"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const connection_1 = __importDefault(require("../browser/connection"));
const injectables_1 = require("../assets/injectables");
const about_blank_page_markup_1 = __importDefault(require("./about-blank-page-markup"));
const lodash_1 = require("lodash");
const debug_1 = __importDefault(require("debug"));
const http_status_codes_1 = require("http-status-codes");
const ALL_DOCUMENT_RESPONSES = {
    urlPattern: '*',
    resourceType: 'Document',
    requestStage: 'Response',
};
const CONTENT_SECURITY_POLICY_HEADER_NAMES = [
    'content-security-policy',
    'content-security-policy-report-only',
];
const debugLogger = (0, debug_1.default)('testcafe:proxyless:resource-injector');
class ResourceInjector {
    constructor(browserId) {
        this._browserId = browserId;
        this._idlePageUrl = this._getIdlePageUrl(browserId);
    }
    _getIdlePageUrl(browserId) {
        var _a;
        return ((_a = connection_1.default.getById(browserId)) === null || _a === void 0 ? void 0 : _a.idleUrl) || '';
    }
    _getResponseAsString(response) {
        return response.base64Encoded
            ? Buffer.from(response.body, 'base64').toString()
            : response.body;
    }
    _isServicePage(url) {
        const browserConnection = connection_1.default.getById(this._browserId);
        const proxy = browserConnection.browserConnectionGateway.proxy;
        return url.startsWith(proxy.server1Info.domain);
    }
    async _prepareInjectableResources() {
        var _a;
        const browserConnection = connection_1.default.getById(this._browserId);
        const proxy = browserConnection.browserConnectionGateway.proxy;
        const windowId = browserConnection.activeWindowId;
        const currentTestRun = (_a = browserConnection === null || browserConnection === void 0 ? void 0 : browserConnection.currentJob) === null || _a === void 0 ? void 0 : _a.currentTestRun;
        if (!currentTestRun)
            return null;
        const taskScript = await currentTestRun.session.getTaskScript({
            referer: '',
            cookieUrl: '',
            isIframe: false,
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
        });
        const injectableResources = {
            stylesheets: [
                injectables_1.TESTCAFE_UI_STYLES,
            ],
            scripts: [
                ...testcafe_hammerhead_1.INJECTABLE_SCRIPTS.map(hs => (0, testcafe_hammerhead_1.getAssetPath)(hs, proxy.options.developmentMode)),
                ...injectables_1.SCRIPTS.map(s => (0, testcafe_hammerhead_1.getAssetPath)(s, proxy.options.developmentMode)),
            ],
            embeddedScripts: [taskScript],
        };
        injectableResources.scripts = injectableResources.scripts.map(script => proxy.resolveRelativeServiceUrl(script));
        injectableResources.stylesheets = injectableResources.stylesheets.map(style => proxy.resolveRelativeServiceUrl(style));
        return injectableResources;
    }
    _processResponseHeaders(headers) {
        if (!headers)
            return [];
        (0, lodash_1.remove)(headers, header => CONTENT_SECURITY_POLICY_HEADER_NAMES.includes(header.name));
        return headers;
    }
    _tryToHandlePageError(err, url) {
        var _a;
        const browserConnection = connection_1.default.getById(this._browserId);
        const currentTestRun = (_a = browserConnection === null || browserConnection === void 0 ? void 0 : browserConnection.currentJob) === null || _a === void 0 ? void 0 : _a.currentTestRun;
        if (!currentTestRun)
            return;
        const ctxMock = {
            reqOpts: { url },
        };
        currentTestRun.session.handlePageError(ctxMock, err);
    }
    async _handleHTTPPages(client) {
        await client.Fetch.enable({ patterns: [ALL_DOCUMENT_RESPONSES] });
        client.Fetch.on('requestPaused', async (params) => {
            const { requestId, responseHeaders, responseStatusCode, } = params;
            if (this._isServicePage(params.request.url))
                await client.Fetch.continueRequest({ requestId });
            else {
                try {
                    const responseObj = await client.Fetch.getResponseBody({ requestId });
                    const responseStr = this._getResponseAsString(responseObj);
                    const injectableResources = await this._prepareInjectableResources();
                    // NOTE: an unhandled exception interrupts the test execution,
                    // and we are force to redirect manually to the idle page.
                    if (!injectableResources) {
                        await client.Fetch.fulfillRequest({
                            requestId,
                            responseCode: http_status_codes_1.StatusCodes.MOVED_PERMANENTLY,
                            responseHeaders: [
                                { name: 'location', value: this._idlePageUrl },
                            ],
                        });
                    }
                    else {
                        const updatedResponseStr = (0, testcafe_hammerhead_1.injectResources)(responseStr, injectableResources);
                        await client.Fetch.fulfillRequest({
                            requestId,
                            responseCode: responseStatusCode || http_status_codes_1.StatusCodes.OK,
                            responseHeaders: this._processResponseHeaders(responseHeaders),
                            body: Buffer.from(updatedResponseStr).toString('base64'),
                        });
                    }
                }
                catch (err) {
                    this._tryToHandlePageError(err, params.request.url);
                    debugLogger('Failed to process request: %s', params.request.url);
                }
            }
        });
    }
    _topFrameNavigationToAboutBlank(event) {
        if (event.frame.url !== testcafe_hammerhead_1.SPECIAL_BLANK_PAGE)
            return false;
        if (event.type !== 'Navigation')
            return false;
        if (event.frame.parentId)
            return false;
        return true;
    }
    async _handleAboutBlankPage(client) {
        await client.Page.enable();
        client.Page.on('frameNavigated', async (params) => {
            if (!this._topFrameNavigationToAboutBlank(params))
                return;
            const injectableResources = await this._prepareInjectableResources();
            const html = (0, testcafe_hammerhead_1.injectResources)(about_blank_page_markup_1.default, injectableResources);
            await client.Page.setDocumentContent({
                frameId: params.frame.id,
                html,
            });
        });
    }
    async setup(client) {
        await this._handleHTTPPages(client);
        await this._handleAboutBlankPage(client);
    }
}
exports.default = ResourceInjector;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,